services:
  - postgres

variables:
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

connect:
  image: postgres
  script:
  # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"


stages:
  - test
  - build jar
  - build and push docker image
  - deploy
# test_job:
#   image: maven:3.6.3-jdk-11-slim
#   stage: test
#   script:
#     # - pwd
#     # - mvn clean
#     # - mvn $MAVEN_OPTS compile
#     # - mvn $MAVEN_OPTS test
#     - mvn test -B
#   artifacts:
#     name: "test_reports"
#     when: on_failure
#     paths: 
#       - target/surefire-reports/
#     reports:
#       junit:
#         - target/surefire-reports/TEST-*.xml
#   tags:
#     - test
#   only:
#     - master
build:
  image: maven:3.6.3-jdk-11-slim
  stage: build jar
  script:
    - mvn $MAVEN_OPTS package -DskipTests=true
  artifacts:
    paths:
      - target/*.jar
    when: always
    expire_in: 1 week

#   only:
#     - master
docker build:
  services:
    - docker:stable
  image: docker:stable
  stage: build and push docker image

  before_script:
    - source .develop.env

  script:
    - docker build --build-arg SPRING_ACTIVE_PROFILE=$SPRING_ACTIVE_PROFILE -t $DOCKER_REPO .

    # - docker build --build-arg SPRING_ACTIVE_PROFILE=dev -t $DOCKER_REPO .

    # - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - docker push $DOCKER_REPO


#   only:
#     - master
deploy:
  image: ubuntu:latest
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - pwd
    - ssh root@$SERVER "docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io; docker stop $APP_NAME; docker system prune -a -f; docker pull $DOCKER_REPO:latest; docker-compose up -d; docker logout"
#   only:
#     - master
